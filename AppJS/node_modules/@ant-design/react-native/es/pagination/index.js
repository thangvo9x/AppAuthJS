import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _createSuper from "@babel/runtime/helpers/esm/createSuper";
import React from 'react';
import { Text, View } from 'react-native';
import Button from '../button/index';
import Flex from '../flex/index';
import { WithTheme } from '../style';
import { getComponentLocale } from '../_util/getLocale';
import zh_CN from './locale/zh_CN';
import PaginationStyles from './style/index';
import { LocaleContext } from '../locale-provider';

var Pagination = /*#__PURE__*/function (_React$Component) {
  _inherits(Pagination, _React$Component);

  var _super = _createSuper(Pagination);

  function Pagination(props) {
    var _this;

    _classCallCheck(this, Pagination);

    _this = _super.call(this, props);
    _this.state = {
      current: props.current
    };
    return _this;
  }

  _createClass(Pagination, [{
    key: "UNSAFE_componentWillReceiveProps",
    value: function UNSAFE_componentWillReceiveProps(nextProps) {
      if (nextProps.current !== this.state.current) {
        this.setState({
          current: nextProps.current
        });
      }
    }
  }, {
    key: "onChange",
    value: function onChange(p) {
      this.setState({
        current: p
      });

      if (this.props.onChange) {
        this.props.onChange(p);
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props = this.props,
          style = _this$props.style,
          mode = _this$props.mode,
          total = _this$props.total,
          simple = _this$props.simple;
      var locale = getComponentLocale(this.props, this.context, 'Pagination', function () {
        return zh_CN;
      });
      var prevText = locale.prevText,
          nextText = locale.nextText;
      return /*#__PURE__*/React.createElement(WithTheme, {
        styles: this.props.styles,
        themeStyles: PaginationStyles
      }, function (styles) {
        var current = _this2.state.current;
        var simpleItem = !simple ? /*#__PURE__*/React.createElement(Flex.Item, null, /*#__PURE__*/React.createElement(View, {
          style: [styles.numberStyle]
        }, /*#__PURE__*/React.createElement(Text, {
          style: [styles.activeTextStyle]
        }, current), /*#__PURE__*/React.createElement(Text, {
          style: [styles.totalStyle]
        }, "/", total))) : /*#__PURE__*/React.createElement(Flex.Item, null);
        var markup = /*#__PURE__*/React.createElement(Flex, null, /*#__PURE__*/React.createElement(Flex.Item, null, /*#__PURE__*/React.createElement(Button, {
          disabled: current <= 1,
          onPress: function onPress() {
            return _this2.onChange(current - 1);
          }
        }, prevText)), simpleItem, /*#__PURE__*/React.createElement(Flex.Item, null, /*#__PURE__*/React.createElement(Button, {
          disabled: current >= total,
          onPress: function onPress() {
            return _this2.onChange(current + 1);
          }
        }, nextText)));

        if (mode === 'number') {
          markup = /*#__PURE__*/React.createElement(View, {
            style: [styles.numberStyle]
          }, /*#__PURE__*/React.createElement(Text, {
            style: [styles.activeTextStyle]
          }, current), /*#__PURE__*/React.createElement(Text, {
            style: [styles.totalStyle]
          }, "/", total));
        } else if (mode === 'pointer') {
          var arr = [];

          for (var i = 0; i < total; i++) {
            arr.push( /*#__PURE__*/React.createElement(View, {
              key: "dot-".concat(i),
              // tslint:disable-next-line:jsx-no-multiline-js
              style: [styles.pointStyle, styles.spaceStyle, i + 1 === current && styles.pointActiveStyle]
            }));
          }

          markup = /*#__PURE__*/React.createElement(View, {
            style: [styles.indicatorStyle, _this2.props.indicatorStyle]
          }, arr);
        }

        return /*#__PURE__*/React.createElement(View, {
          style: [styles.container, style]
        }, markup);
      });
    }
  }]);

  return Pagination;
}(React.Component);

export { Pagination as default };
Pagination.defaultProps = {
  mode: 'button',
  current: 1,
  total: 0,
  simple: false,
  onChange: function onChange() {},
  indicatorStyle: null
};
Pagination.contextType = LocaleContext;