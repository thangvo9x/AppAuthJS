import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _createSuper from "@babel/runtime/helpers/esm/createSuper";
import React from 'react';
import RMCCascader from '../picker/cascader';
import MultiPicker from '../picker/MultiPicker';
import RMCPicker from '../picker/Picker';

function getDefaultProps() {
  return {
    cols: 3,
    cascade: true,
    value: [],
    onChange: function onChange() {}
  };
}

var PickerView = /*#__PURE__*/function (_React$Component) {
  _inherits(PickerView, _React$Component);

  var _super = _createSuper(PickerView);

  function PickerView() {
    var _this;

    _classCallCheck(this, PickerView);

    _this = _super.apply(this, arguments);

    _this.getCol = function () {
      var _this$props = _this.props,
          data = _this$props.data,
          indicatorStyle = _this$props.indicatorStyle,
          itemStyle = _this$props.itemStyle;
      return data.map(function (col, index) {
        return /*#__PURE__*/React.createElement(RMCPicker, {
          key: index,
          style: {
            flex: 1
          },
          indicatorStyle: indicatorStyle,
          itemStyle: itemStyle
        }, col.map(function (item) {
          return /*#__PURE__*/React.createElement(RMCPicker.Item, {
            key: item.value,
            value: item.value
          }, item.label);
        }));
      });
    };

    return _this;
  }

  _createClass(PickerView, [{
    key: "render",
    value: function render() {
      // tslint:disable-next-line:no-this-assignment
      var props = this.props;
      var picker;

      if (props.cascade) {
        picker = /*#__PURE__*/React.createElement(RMCCascader, {
          data: props.data,
          value: props.value,
          onChange: props.onChange,
          onScrollChange: props.onScrollChange,
          cols: props.cols,
          indicatorStyle: props.indicatorStyle,
          pickerItemStyle: props.itemStyle
        });
      } else {
        picker = /*#__PURE__*/React.createElement(MultiPicker, {
          selectedValue: props.value,
          onValueChange: props.onChange,
          onScrollChange: props.onScrollChange,
          style: {
            flexDirection: 'row'
          }
        }, this.getCol());
      }

      return picker;
    }
  }]);

  return PickerView;
}(React.Component);

export { PickerView as default };
PickerView.defaultProps = getDefaultProps();