import _extends from "@babel/runtime/helpers/esm/extends";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _createSuper from "@babel/runtime/helpers/esm/createSuper";

var __rest = this && this.__rest || function (s, e) {
  var t = {};

  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  }

  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};

import React from 'react';
import DrawerLayout from 'react-native-gesture-handler/DrawerLayout';

var Drawer = /*#__PURE__*/function (_React$Component) {
  _inherits(Drawer, _React$Component);

  var _super = _createSuper(Drawer);

  function Drawer() {
    _classCallCheck(this, Drawer);

    return _super.apply(this, arguments);
  }

  _createClass(Drawer, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      if (this.props.open && this.drawer) {
        this.drawer.openDrawer();
      }
    }
  }, {
    key: "UNSAFE_componentWillReceiveProps",
    value: function UNSAFE_componentWillReceiveProps(nextProps) {
      if (nextProps.open !== this.props.open && this.drawer) {
        this.drawer[nextProps.open ? 'openDrawer' : 'closeDrawer']();
      }
    }
  }, {
    key: "onOpenChange",
    value: function onOpenChange(isOpen) {
      if (this.props.onOpenChange) {
        this.props.onOpenChange(isOpen);
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this = this;

      var _a = this.props,
          sidebar = _a.sidebar,
          position = _a.position,
          drawerRef = _a.drawerRef,
          _a$drawerWidth = _a.drawerWidth,
          drawerWidth = _a$drawerWidth === void 0 ? 300 : _a$drawerWidth,
          restProps = __rest(_a, ["sidebar", "position", "drawerRef", "drawerWidth"]);

      ['onOpenChange', 'onDrawerOpen', 'onDrawerClose', 'drawerPosition', 'renderNavigationView'].forEach(function (prop) {
        if (restProps.hasOwnProperty(prop)) {
          delete restProps[prop];
        }
      });
      return /*#__PURE__*/React.createElement(DrawerLayout, _extends({
        ref: function ref(el) {
          if (drawerRef) {
            drawerRef(el);
          }

          _this.drawer = el;
        },
        renderNavigationView: function renderNavigationView() {
          return sidebar;
        },
        drawerPosition: position,
        onDrawerOpen: function onDrawerOpen() {
          return _this.onOpenChange(true);
        },
        onDrawerClose: function onDrawerClose() {
          return _this.onOpenChange(false);
        },
        keyboardDismissMode: "on-drag",
        drawerWidth: drawerWidth
      }, restProps));
    }
  }]);

  return Drawer;
}(React.Component);

export { Drawer as default };
Drawer.defaultProps = {
  position: 'left',
  open: false,
  drawerWidth: 300
};