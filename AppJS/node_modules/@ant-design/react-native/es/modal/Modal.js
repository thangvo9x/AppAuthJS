import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _createSuper from "@babel/runtime/helpers/esm/createSuper";
import React from 'react';
import { Text, TouchableHighlight, TouchableWithoutFeedback, View, KeyboardAvoidingView, Platform } from 'react-native';
import { WithTheme } from '../style';
import { getComponentLocale } from '../_util/getLocale';
import zh_CN from './locale/zh_CN';
import RCModal from './ModalView';
import modalStyles from './style/index';
import { LocaleContext } from '../locale-provider';

var AntmModal = /*#__PURE__*/function (_React$Component) {
  _inherits(AntmModal, _React$Component);

  var _super = _createSuper(AntmModal);

  function AntmModal() {
    _classCallCheck(this, AntmModal);

    return _super.apply(this, arguments);
  }

  _createClass(AntmModal, [{
    key: "render",
    value: function render() {
      var _this = this;

      var _this$props = this.props,
          title = _this$props.title,
          closable = _this$props.closable,
          footer = _this$props.footer,
          children = _this$props.children,
          style = _this$props.style,
          animateAppear = _this$props.animateAppear,
          maskClosable = _this$props.maskClosable,
          popup = _this$props.popup,
          transparent = _this$props.transparent,
          visible = _this$props.visible,
          onClose = _this$props.onClose,
          bodyStyle = _this$props.bodyStyle,
          onAnimationEnd = _this$props.onAnimationEnd,
          onRequestClose = _this$props.onRequestClose; // tslint:disable-next-line:variable-name

      var _locale = getComponentLocale(this.props, this.context, 'Modal', function () {
        return zh_CN;
      });

      return /*#__PURE__*/React.createElement(WithTheme, {
        styles: this.props.styles,
        themeStyles: modalStyles
      }, function (styles) {
        var btnGroupStyle = styles.buttonGroupV;
        var horizontalFlex = {};

        if (footer && footer.length === 2 && !_this.props.operation) {
          btnGroupStyle = styles.buttonGroupH;
          horizontalFlex = {
            flex: 1
          };
        }

        var buttonWrapStyle = footer && footer.length === 2 ? styles.buttonWrapH : styles.buttonWrapV;
        var footerDom;

        if (footer && footer.length) {
          var footerButtons = footer.map(function (button, i) {
            var buttonStyle = {};

            if (_this.props.operation) {
              buttonStyle = styles.buttonTextOperation;
            }

            if (button.style) {
              buttonStyle = button.style;

              if (typeof buttonStyle === 'string') {
                var styleMap = {
                  cancel: {},
                  "default": {},
                  destructive: {
                    color: 'red'
                  }
                };
                buttonStyle = styleMap[buttonStyle] || {};
              }
            }

            var noneBorder = footer && footer.length === 2 && i === 1 ? {
              borderRightWidth: 0
            } : {};

            var onPressFn = function onPressFn() {
              if (button.onPress) {
                button.onPress();
              }

              if (onClose) {
                onClose();
              }
            };

            return /*#__PURE__*/React.createElement(TouchableHighlight, {
              key: i,
              style: horizontalFlex,
              underlayColor: "#ddd",
              onPress: onPressFn
            }, /*#__PURE__*/React.createElement(View, {
              style: [buttonWrapStyle, noneBorder]
            }, /*#__PURE__*/React.createElement(Text, {
              style: [styles.buttonText, buttonStyle]
            }, button.text || "".concat(_locale.buttonText).concat(i))));
          });
          footerDom = /*#__PURE__*/React.createElement(View, {
            style: [btnGroupStyle, styles.footer]
          }, footerButtons);
        }

        var animType = _this.props.animationType;

        if (transparent) {
          if (animType === 'slide') {
            animType = 'slide-up';
          }

          var closableDom = closable ? /*#__PURE__*/React.createElement(View, {
            style: [styles.closeWrap]
          }, /*#__PURE__*/React.createElement(TouchableWithoutFeedback, {
            onPress: onClose
          }, /*#__PURE__*/React.createElement(View, null, /*#__PURE__*/React.createElement(Text, {
            style: [styles.close]
          }, "\xD7")))) : null;
          return /*#__PURE__*/React.createElement(View, {
            style: styles.container
          }, /*#__PURE__*/React.createElement(RCModal, {
            onClose: onClose,
            animationType: animType,
            wrapStyle: transparent ? styles.wrap : undefined,
            style: styles.wrap,
            visible: visible,
            onAnimationEnd: onAnimationEnd,
            onRequestClose: onRequestClose,
            animateAppear: animateAppear,
            maskClosable: maskClosable
          }, /*#__PURE__*/React.createElement(KeyboardAvoidingView, {
            behavior: "padding",
            enabled: Platform.OS === 'ios'
          }, /*#__PURE__*/React.createElement(View, {
            style: [styles.innerContainer, style]
          }, title ? /*#__PURE__*/React.createElement(Text, {
            style: [styles.header]
          }, title) : null, /*#__PURE__*/React.createElement(View, {
            style: [styles.body, bodyStyle]
          }, children), footerDom, closableDom))));
        }

        if (popup) {
          var aType = 'SlideDown';

          if (animType === 'slide-up') {
            animType = 'slide-up';
            aType = 'SlideUp';
          } else {
            animType = 'slide-down';
          }

          return /*#__PURE__*/React.createElement(View, {
            style: styles.container
          }, /*#__PURE__*/React.createElement(RCModal, {
            onClose: onClose,
            animationType: animType,
            // tslint:disable-next-line:jsx-no-multiline-js
            style: [styles.popupContainer, styles["popup".concat(aType)], style],
            visible: visible,
            onAnimationEnd: onAnimationEnd,
            onRequestClose: onRequestClose,
            animateAppear: animateAppear,
            maskClosable: maskClosable
          }, /*#__PURE__*/React.createElement(View, {
            style: bodyStyle
          }, children)));
        }

        if (animType === 'slide') {
          animType = undefined;
        }

        return /*#__PURE__*/React.createElement(View, {
          style: styles.container
        }, /*#__PURE__*/React.createElement(RCModal, {
          visible: visible,
          animationType: animType,
          onRequestClose: onRequestClose,
          onClose: onClose
        }, /*#__PURE__*/React.createElement(View, {
          style: style
        }, children)));
      });
    }
  }]);

  return AntmModal;
}(React.Component);

AntmModal.defaultProps = {
  visible: false,
  closable: false,
  maskClosable: false,
  style: {},
  bodyStyle: {},
  animationType: 'fade',
  onClose: function onClose() {},
  footer: [],
  transparent: false,
  popup: false,
  animateAppear: true,
  operation: false
};
AntmModal.contextType = LocaleContext;
export default AntmModal;