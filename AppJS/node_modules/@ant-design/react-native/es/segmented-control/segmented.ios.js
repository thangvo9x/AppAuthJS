import _extends from "@babel/runtime/helpers/esm/extends";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _createSuper from "@babel/runtime/helpers/esm/createSuper";

var __rest = this && this.__rest || function (s, e) {
  var t = {};

  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  }

  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};

import React from 'react';
import SegmentedControlIOS from '@react-native-community/segmented-control';
import { WithTheme } from '../style';

var SegmentedControl = /*#__PURE__*/function (_React$Component) {
  _inherits(SegmentedControl, _React$Component);

  var _super = _createSuper(SegmentedControl);

  function SegmentedControl() {
    _classCallCheck(this, SegmentedControl);

    return _super.apply(this, arguments);
  }

  _createClass(SegmentedControl, [{
    key: "render",
    value: function render() {
      var _a = this.props,
          tintColor = _a.tintColor,
          disabled = _a.disabled,
          selectedIndex = _a.selectedIndex,
          restProps = __rest(_a, ["tintColor", "disabled", "selectedIndex"]);

      return /*#__PURE__*/React.createElement(WithTheme, null, function (_, theme) {
        return /*#__PURE__*/React.createElement(SegmentedControlIOS, _extends({
          tintColor: tintColor || theme.segmented_control_color,
          selectedIndex: selectedIndex
        }, restProps, {
          enabled: !disabled
        }));
      });
    }
  }]);

  return SegmentedControl;
}(React.Component);

export { SegmentedControl as default };
SegmentedControl.defaultProps = {
  selectedIndex: 0
};