import _extends from "@babel/runtime/helpers/esm/extends";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _createSuper from "@babel/runtime/helpers/esm/createSuper";
import React from 'react';
import { TextInput } from 'react-native';

var Input = /*#__PURE__*/function (_React$Component) {
  _inherits(Input, _React$Component);

  var _super = _createSuper(Input);

  function Input(props) {
    var _this;

    _classCallCheck(this, Input);

    _this = _super.call(this, props);

    _this.focus = function () {
      if (_this.inputRef) {
        _this.inputRef.focus();
      }
    };

    _this.clear = function () {
      if (_this.inputRef) {
        _this.inputRef.clear();
      }
    }; // todos: remove focused in next major version.


    _this.state = {
      focused: props.focused || false
    };
    return _this;
  }

  _createClass(Input, [{
    key: "UNSAFE_componentWillReceiveProps",
    value: function UNSAFE_componentWillReceiveProps(nextProps) {
      if (nextProps.focused !== this.state.focused) {
        this.setState({
          focused: nextProps.focused
        });
      }
    }
  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      if (this.inputRef && (this.props.autoFocus || this.props.focused)) {
        this.inputRef.focus();
      }
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate() {
      if (this.inputRef && this.props.focused) {
        this.inputRef.focus();
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      return /*#__PURE__*/React.createElement(TextInput, _extends({
        ref: function ref(el) {
          return _this2.inputRef = el;
        },
        underlineColorAndroid: "transparent"
      }, this.props));
    }
  }]);

  return Input;
}(React.Component);

export default Input;