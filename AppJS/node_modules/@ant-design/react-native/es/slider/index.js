import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _createSuper from "@babel/runtime/helpers/esm/createSuper";
import React from 'react';
import { View } from 'react-native';
import Slider from '@react-native-community/slider';
import { WithTheme } from '../style';

var SliderAntm = /*#__PURE__*/function (_React$Component) {
  _inherits(SliderAntm, _React$Component);

  var _super = _createSuper(SliderAntm);

  function SliderAntm() {
    _classCallCheck(this, SliderAntm);

    return _super.apply(this, arguments);
  }

  _createClass(SliderAntm, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          defaultValue = _this$props.defaultValue,
          value = _this$props.value,
          min = _this$props.min,
          max = _this$props.max,
          step = _this$props.step,
          disabled = _this$props.disabled,
          onChange = _this$props.onChange,
          onAfterChange = _this$props.onAfterChange,
          maximumTrackTintColor = _this$props.maximumTrackTintColor,
          minimumTrackTintColor = _this$props.minimumTrackTintColor;
      return /*#__PURE__*/React.createElement(WithTheme, null, function (_, theme) {
        return /*#__PURE__*/React.createElement(View, null, /*#__PURE__*/React.createElement(Slider, {
          value: defaultValue || value,
          minimumValue: min,
          maximumValue: max,
          step: step,
          minimumTrackTintColor: minimumTrackTintColor || theme.brand_primary,
          maximumTrackTintColor: maximumTrackTintColor || theme.border_color_base,
          disabled: disabled,
          onValueChange: onChange,
          onSlidingComplete: onAfterChange
        }));
      });
    }
  }]);

  return SliderAntm;
}(React.Component);

export { SliderAntm as default };
SliderAntm.defaultProps = {
  onChange: function onChange() {},
  onAfterChange: function onAfterChange() {},
  defaultValue: 0,
  disabled: false
};