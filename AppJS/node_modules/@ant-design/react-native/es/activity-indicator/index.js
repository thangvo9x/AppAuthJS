import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _createSuper from "@babel/runtime/helpers/esm/createSuper";
import React from 'react';
import { ActivityIndicator, Text, View } from 'react-native';
import { WithTheme } from '../style';
import ActivityIndicatorStyles from './style/index';

var RNActivityIndicator = /*#__PURE__*/function (_React$Component) {
  _inherits(RNActivityIndicator, _React$Component);

  var _super = _createSuper(RNActivityIndicator);

  function RNActivityIndicator() {
    _classCallCheck(this, RNActivityIndicator);

    return _super.apply(this, arguments);
  }

  _createClass(RNActivityIndicator, [{
    key: "_renderToast",
    value: function _renderToast() {
      var _this = this;

      var _this$props = this.props,
          _this$props$color = _this$props.color,
          color = _this$props$color === void 0 ? 'white' : _this$props$color,
          _this$props$size = _this$props.size,
          size = _this$props$size === void 0 ? 'large' : _this$props$size;
      return /*#__PURE__*/React.createElement(WithTheme, {
        styles: this.props.styles,
        themeStyles: ActivityIndicatorStyles
      }, function (styles) {
        return /*#__PURE__*/React.createElement(View, {
          style: [styles.container]
        }, /*#__PURE__*/React.createElement(View, {
          style: [styles.innerContainer, {
            height: 89
          }]
        }, /*#__PURE__*/React.createElement(View, {
          style: [styles.wrapper]
        }, /*#__PURE__*/React.createElement(ActivityIndicator, {
          color: color,
          size: size
        }), _this.props.text && /*#__PURE__*/React.createElement(Text, {
          style: [styles.toast]
        }, _this.props.text))));
      });
    }
  }, {
    key: "_renderSpinner",
    value: function _renderSpinner() {
      var _this$props2 = this.props,
          color = _this$props2.color,
          size = _this$props2.size,
          text = _this$props2.text;
      return /*#__PURE__*/React.createElement(WithTheme, {
        styles: this.props.styles,
        themeStyles: ActivityIndicatorStyles
      }, function (styles) {
        return /*#__PURE__*/React.createElement(View, {
          style: styles.spinner
        }, /*#__PURE__*/React.createElement(ActivityIndicator, {
          color: color,
          size: size
        }), text && /*#__PURE__*/React.createElement(Text, {
          style: [styles.tip]
        }, text));
      });
    }
  }, {
    key: "render",
    value: function render() {
      if (this.props.animating) {
        return this.props.toast ? this._renderToast() : this._renderSpinner();
      }

      return null;
    }
  }]);

  return RNActivityIndicator;
}(React.Component);

export { RNActivityIndicator as default };
RNActivityIndicator.defaultProps = {
  animating: true,
  color: 'gray',
  size: 'small',
  toast: false
};