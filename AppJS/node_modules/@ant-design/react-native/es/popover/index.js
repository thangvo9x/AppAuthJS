import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _createSuper from "@babel/runtime/helpers/esm/createSuper";
import React, { isValidElement } from 'react';
import { ScrollView, TouchableOpacity, View } from 'react-native';
import { Popover as Pop, PopoverController } from 'react-native-modal-popover';
import { WithTheme } from '../style';
import PopoverStyles from './style';
export var PopoverItem = /*#__PURE__*/function (_React$PureComponent) {
  _inherits(PopoverItem, _React$PureComponent);

  var _super = _createSuper(PopoverItem);

  function PopoverItem() {
    _classCallCheck(this, PopoverItem);

    return _super.apply(this, arguments);
  }

  _createClass(PopoverItem, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          value = _this$props.value,
          disabled = _this$props.disabled,
          children = _this$props.children,
          onSelect = _this$props.onSelect,
          style = _this$props.style;
      return /*#__PURE__*/React.createElement(WithTheme, null, function (_, theme) {
        return /*#__PURE__*/React.createElement(TouchableOpacity, {
          activeOpacity: 0.75,
          disabled: disabled,
          onPress: function onPress() {
            if (typeof onSelect === 'function') {
              onSelect(value);
            }
          },
          style: [{
            padding: theme.v_spacing_md
          }, style]
        }, children);
      });
    }
  }]);

  return PopoverItem;
}(React.PureComponent);

var Popover = /*#__PURE__*/function (_React$PureComponent2) {
  _inherits(Popover, _React$PureComponent2);

  var _super2 = _createSuper(Popover);

  function Popover() {
    var _this;

    _classCallCheck(this, Popover);

    _this = _super2.apply(this, arguments);

    _this.onSelect = function (value, closePopover) {
      var onSelect = _this.props.onSelect;

      if (onSelect) {
        onSelect(value);
      }

      closePopover();
    };

    _this.renderOverlay = function (closePopover) {
      var _this$props2 = _this.props,
          overlay = _this$props2.overlay,
          renderOverlayComponent = _this$props2.renderOverlayComponent;
      var items = React.Children.map(overlay, function (child) {
        if (! /*#__PURE__*/isValidElement(child)) {
          return child;
        }

        return /*#__PURE__*/React.cloneElement(child, {
          onSelect: function onSelect(v) {
            return _this.onSelect(v, closePopover);
          }
        });
      });

      if (typeof renderOverlayComponent === 'function') {
        return renderOverlayComponent(items, closePopover);
      }

      return /*#__PURE__*/React.createElement(ScrollView, null, items);
    };

    return _this;
  }

  _createClass(Popover, [{
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props3 = this.props,
          children = _this$props3.children,
          disabled = _this$props3.disabled,
          triggerStyle = _this$props3.triggerStyle,
          styles = _this$props3.styles,
          placement = _this$props3.placement,
          duration = _this$props3.duration,
          easing = _this$props3.easing,
          useNativeDriver = _this$props3.useNativeDriver,
          onDismiss = _this$props3.onDismiss;
      return /*#__PURE__*/React.createElement(WithTheme, {
        themeStyles: PopoverStyles,
        styles: styles
      }, function (s) {
        return /*#__PURE__*/React.createElement(PopoverController, null, function (_ref) {
          var openPopover = _ref.openPopover,
              closePopover = _ref.closePopover,
              popoverVisible = _ref.popoverVisible,
              setPopoverAnchor = _ref.setPopoverAnchor,
              popoverAnchorRect = _ref.popoverAnchorRect;
          return /*#__PURE__*/React.createElement(View, null, /*#__PURE__*/React.createElement(TouchableOpacity, {
            ref: setPopoverAnchor,
            onPress: openPopover,
            style: triggerStyle,
            disabled: disabled,
            activeOpacity: 0.75
          }, children), /*#__PURE__*/React.createElement(Pop, {
            contentStyle: s.content,
            arrowStyle: s.arrow,
            backgroundStyle: s.background,
            visible: popoverVisible,
            onClose: closePopover,
            fromRect: popoverAnchorRect,
            supportedOrientations: ['portrait', 'landscape'],
            placement: placement,
            duration: duration,
            easing: easing,
            useNativeDriver: useNativeDriver,
            onDismiss: onDismiss
          }, _this2.renderOverlay(closePopover)));
        });
      });
    }
  }]);

  return Popover;
}(React.PureComponent);

export { Popover as default };
Popover.defaultProps = {
  onSelect: function onSelect() {}
};
Popover.Item = PopoverItem;