import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _createSuper from "@babel/runtime/helpers/esm/createSuper";
import React from 'react';
import { SafeAreaView, View } from 'react-native';
import { WithTheme } from '../style';
import TabBarStyles from './style/index';
import TabBarItem from './TabBarItem';

var TabBar = /*#__PURE__*/function (_React$Component) {
  _inherits(TabBar, _React$Component);

  var _super = _createSuper(TabBar);

  function TabBar() {
    _classCallCheck(this, TabBar);

    return _super.apply(this, arguments);
  }

  _createClass(TabBar, [{
    key: "getPanes",
    value: function getPanes(styles, content) {
      var _this$props = this.props,
          tintColor = _this$props.tintColor,
          unselectedTintColor = _this$props.unselectedTintColor,
          children = _this$props.children; // ios 规则： selected 为多个则只选中最后一个， selected 为 0 个则选中第一个;

      var selectedIndex = 0;
      [].concat(children).forEach(function (child, idx) {
        if (child.props.selected) {
          selectedIndex = idx;
        }
      });
      var newChildren = [];
      React.Children.map(children, function (child, idx) {
        if (content && selectedIndex === idx) {
          newChildren.push( /*#__PURE__*/React.createElement(View, {
            key: idx,
            style: [styles.contentItem, idx === selectedIndex ? styles.contentItemSelected : undefined]
          }, child.props.children));
        } else {
          newChildren.push( /*#__PURE__*/React.cloneElement(child, {
            key: idx,
            tintColor: tintColor,
            unselectedTintColor: unselectedTintColor,
            styles: styles
          }));
        }
      });

      if (content) {
        return newChildren.filter(function (_, i) {
          return i === selectedIndex;
        });
      }

      return newChildren;
    }
  }, {
    key: "render",
    value: function render() {
      var _this = this;

      var style = {
        backgroundColor: this.props.barTintColor
      };
      return /*#__PURE__*/React.createElement(SafeAreaView, {
        style: [{
          flex: 1
        }, style]
      }, /*#__PURE__*/React.createElement(WithTheme, {
        styles: this.props.styles,
        themeStyles: TabBarStyles
      }, function (styles) {
        return /*#__PURE__*/React.createElement(View, {
          style: styles.tabbar
        }, /*#__PURE__*/React.createElement(View, {
          style: styles.content
        }, _this.getPanes(styles, true)), /*#__PURE__*/React.createElement(View, {
          style: [style, styles.tabs]
        }, _this.getPanes(styles, false)));
      }));
    }
  }]);

  return TabBar;
}(React.Component);

TabBar.defaultProps = {
  barTintColor: 'white',
  tintColor: '#108ee9',
  unselectedTintColor: '#888'
};
TabBar.Item = TabBarItem;
export default TabBar;