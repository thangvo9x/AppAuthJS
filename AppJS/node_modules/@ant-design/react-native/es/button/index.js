import _extends from "@babel/runtime/helpers/esm/extends";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _createSuper from "@babel/runtime/helpers/esm/createSuper";

var __rest = this && this.__rest || function (s, e) {
  var t = {};

  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  }

  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
}; // tslint:disable:no-empty


import React from 'react';
import { ActivityIndicator, StyleSheet, Text, TouchableHighlight, View } from 'react-native';
import { WithTheme } from '../style';
import buttonStyles from './style/index';

var Button = /*#__PURE__*/function (_React$Component) {
  _inherits(Button, _React$Component);

  var _super = _createSuper(Button);

  function Button(props) {
    var _this;

    _classCallCheck(this, Button);

    _this = _super.call(this, props);

    _this.onPressIn = function (event) {
      _this.setState({
        pressIn: true
      });

      if (_this.props.onPressIn) {
        _this.props.onPressIn(event);
      }
    };

    _this.onPressOut = function (event) {
      _this.setState({
        pressIn: false
      });

      if (_this.props.onPressOut) {
        _this.props.onPressOut(event);
      }
    };

    _this.onShowUnderlay = function () {
      _this.setState({
        touchIt: true
      });

      if (_this.props.onShowUnderlay) {
        _this.props.onShowUnderlay();
      }
    };

    _this.onHideUnderlay = function () {
      _this.setState({
        touchIt: false
      });

      if (_this.props.onHideUnderlay) {
        _this.props.onHideUnderlay();
      }
    };

    _this.state = {
      pressIn: false,
      touchIt: false
    };
    return _this;
  }

  _createClass(Button, [{
    key: "render",
    value: function render() {
      var _this2 = this;

      // for using setNativeProps to improve performance
      var _a = this.props,
          _a$size = _a.size,
          size = _a$size === void 0 ? 'large' : _a$size,
          _a$type = _a.type,
          type = _a$type === void 0 ? 'default' : _a$type,
          disabled = _a.disabled,
          activeStyle = _a.activeStyle,
          _onPress = _a.onPress,
          style = _a.style,
          styles = _a.styles,
          loading = _a.loading,
          restProps = __rest(_a, ["size", "type", "disabled", "activeStyle", "onPress", "style", "styles", "loading"]);

      return /*#__PURE__*/React.createElement(WithTheme, {
        themeStyles: buttonStyles,
        styles: styles
      }, function (_styles) {
        var textStyle = [_styles["".concat(size, "RawText")], _styles["".concat(type, "RawText")], disabled && _styles["".concat(type, "DisabledRawText")], _this2.state.pressIn && _styles["".concat(type, "HighlightText")]];
        var wrapperStyle = [_styles.wrapperStyle, _styles["".concat(size, "Raw")], _styles["".concat(type, "Raw")], disabled && _styles["".concat(type, "DisabledRaw")], _this2.state.pressIn && activeStyle && _styles["".concat(type, "Highlight")], activeStyle && _this2.state.touchIt && activeStyle, style];
        var underlayColor = StyleSheet.flatten(activeStyle ? activeStyle : _styles["".concat(type, "Highlight")]).backgroundColor;
        var indicatorColor = StyleSheet.flatten(_this2.state.pressIn ? _styles["".concat(type, "HighlightText")] : _styles["".concat(type, "RawText")]).color;
        return /*#__PURE__*/React.createElement(TouchableHighlight, _extends({
          activeOpacity: 0.4
        }, restProps, {
          style: wrapperStyle,
          disabled: disabled,
          underlayColor: underlayColor,
          onPress: function onPress(e) {
            return _onPress && _onPress(e);
          },
          onPressIn: _this2.onPressIn,
          onPressOut: _this2.onPressOut,
          onShowUnderlay: _this2.onShowUnderlay,
          onHideUnderlay: _this2.onHideUnderlay
        }), /*#__PURE__*/React.createElement(View, {
          style: _styles.container
        }, loading ?
        /*#__PURE__*/
        // tslint:disable-next-line:jsx-no-multiline-js
        React.createElement(ActivityIndicator, {
          style: _styles.indicator,
          animating: true,
          color: indicatorColor,
          size: "small"
        }) : null, /*#__PURE__*/React.createElement(Text, {
          style: textStyle
        }, _this2.props.children)));
      });
    }
  }]);

  return Button;
}(React.Component);

export { Button as default };
Button.defaultProps = {
  pressIn: false,
  disabled: false,
  loading: false,
  onPress: function onPress(_) {},
  onPressIn: function onPressIn(_) {},
  onPressOut: function onPressOut(_) {},
  onShowUnderlay: function onShowUnderlay(_) {},
  onHideUnderlay: function onHideUnderlay(_) {}
};