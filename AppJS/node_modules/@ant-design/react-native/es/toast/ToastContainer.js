import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _createSuper from "@babel/runtime/helpers/esm/createSuper";
import React from 'react';
import { ActivityIndicator, Animated, Text, View } from 'react-native';
import Icon from '../icon';
import { WithTheme } from '../style';
import ToastStyles from './style/index';

var ToastContainer = /*#__PURE__*/function (_React$Component) {
  _inherits(ToastContainer, _React$Component);

  var _super = _createSuper(ToastContainer);

  function ToastContainer(props) {
    var _this;

    _classCallCheck(this, ToastContainer);

    _this = _super.call(this, props);
    _this.state = {
      fadeAnim: new Animated.Value(0)
    };
    return _this;
  }

  _createClass(ToastContainer, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this2 = this;

      var _this$props = this.props,
          onClose = _this$props.onClose,
          onAnimationEnd = _this$props.onAnimationEnd;
      var duration = this.props.duration;
      var timing = Animated.timing;

      if (this.anim) {
        this.anim = null;
      }

      var animArr = [timing(this.state.fadeAnim, {
        toValue: 1,
        duration: 200,
        useNativeDriver: true
      }), Animated.delay(duration * 1000)];

      if (duration > 0) {
        animArr.push(timing(this.state.fadeAnim, {
          toValue: 0,
          duration: 200,
          useNativeDriver: true
        }));
      }

      this.anim = Animated.sequence(animArr);
      this.anim.start(function () {
        if (duration > 0) {
          _this2.anim = null;

          if (onClose) {
            onClose();
          }

          if (onAnimationEnd) {
            onAnimationEnd();
          }
        }
      });
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      if (this.anim) {
        this.anim.stop();
        this.anim = null;
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this3 = this;

      var _this$props2 = this.props,
          _this$props2$type = _this$props2.type,
          type = _this$props2$type === void 0 ? '' : _this$props2$type,
          content = _this$props2.content,
          mask = _this$props2.mask;
      return /*#__PURE__*/React.createElement(WithTheme, {
        styles: this.props.styles,
        themeStyles: ToastStyles
      }, function (styles) {
        var iconType = {
          success: 'check-circle',
          fail: 'close-circle',
          offline: 'frown'
        };
        var iconDom = null;

        if (type === 'loading') {
          iconDom = /*#__PURE__*/React.createElement(ActivityIndicator, {
            animating: true,
            style: [styles.centering],
            color: "white",
            size: "large"
          });
        } else if (type === 'info') {
          iconDom = null;
        } else {
          iconDom = /*#__PURE__*/React.createElement(Icon, {
            name: iconType[type],
            style: styles.image,
            color: "white",
            size: 36
          });
        }

        return /*#__PURE__*/React.createElement(View, {
          style: [styles.container],
          pointerEvents: mask ? undefined : 'box-none'
        }, /*#__PURE__*/React.createElement(View, {
          style: [styles.innerContainer]
        }, /*#__PURE__*/React.createElement(Animated.View, {
          style: {
            opacity: _this3.state.fadeAnim
          }
        }, /*#__PURE__*/React.createElement(View, {
          style: [styles.innerWrap, iconDom ? styles.iconToast : styles.textToast]
        }, iconDom, /*#__PURE__*/React.createElement(Text, {
          style: styles.content
        }, content)))));
      });
    }
  }]);

  return ToastContainer;
}(React.Component);

export { ToastContainer as default };
ToastContainer.defaultProps = {
  duration: 3,
  mask: true,
  onClose: function onClose() {}
};