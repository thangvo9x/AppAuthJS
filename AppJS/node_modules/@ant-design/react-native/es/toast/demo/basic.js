import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _createSuper from "@babel/runtime/helpers/esm/createSuper";

/* tslint:disable:no-console */
import React from 'react';
import { DeviceEventEmitter } from 'react-native';
import { Button, List, Switch, Toast, WhiteSpace, WingBlank } from '../../';

function showToastStack() {
  // multiple toast
  Toast.fail({
    content: 'This is a toast tips 1 !!!',
    duration: 3,
    stackable: true
  });
  Toast.success({
    content: 'This is a toast tips 2 !!!',
    duration: 2,
    stackable: true
  });
  Toast.info({
    content: 'This is a toast tips 3 !!!',
    duration: 1,
    stackable: true
  });
}

function infoToast() {
  Toast.info({
    content: 'Text toast'
  });
}

function successToast() {
  Toast.success('Load success !!!', 1);
}

function showToastNoMask() {
  Toast.info({
    content: 'Toast without mask',
    mask: false
  });
}

function failToast() {
  Toast.fail('Load failed !!!');
}

function offline() {
  Toast.offline('Network connection failed !!!');
}

function loadingToast() {
  Toast.loading({
    content: 'Loading...',
    duration: 1,
    onClose: function onClose() {
      return console.log('Load complete !!!');
    }
  });
}

var ToastExample = /*#__PURE__*/function (_React$Component) {
  _inherits(ToastExample, _React$Component);

  var _super = _createSuper(ToastExample);

  function ToastExample() {
    var _this;

    _classCallCheck(this, ToastExample);

    _this = _super.apply(this, arguments);
    _this.state = {
      enableMask: Toast.getConfig().mask,
      enableStack: Toast.getConfig().stackable
    };

    _this.alwaysShowToast = function () {
      var key = Toast.info({
        content: 'Toast with duration = 0, removed by timer',
        duration: 0
      });
      _this.timer = setTimeout(function () {
        Toast.remove(key);
      }, 5000);
    };

    return _this;
  }

  _createClass(ToastExample, [{
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      DeviceEventEmitter.removeAllListeners('navigatorBack');

      if (this.timer) {
        clearTimeout(this.timer);
        this.timer = null;
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      return /*#__PURE__*/React.createElement(WingBlank, {
        style: {
          marginTop: 20
        }
      }, /*#__PURE__*/React.createElement(List, null, /*#__PURE__*/React.createElement(List.Item, {
        extra: /*#__PURE__*/React.createElement(Switch, {
          checked: this.state.enableMask,
          onChange: function onChange(mask) {
            Toast.config({
              mask: mask
            });

            _this2.setState({
              enableMask: Toast.getConfig().mask
            });
          }
        })
      }, "Enable Mask"), /*#__PURE__*/React.createElement(List.Item, {
        extra: /*#__PURE__*/React.createElement(Switch, {
          checked: this.state.enableStack,
          onChange: function onChange(stackable) {
            Toast.config({
              stackable: stackable
            });

            _this2.setState({
              enableStack: Toast.getConfig().stackable
            });
          }
        })
      }, "Enable Stack")), /*#__PURE__*/React.createElement(WhiteSpace, null), /*#__PURE__*/React.createElement(Button, {
        onPress: showToastNoMask
      }, "Without mask"), /*#__PURE__*/React.createElement(WhiteSpace, null), /*#__PURE__*/React.createElement(Button, {
        onPress: showToastStack
      }, "Stackable toast"), /*#__PURE__*/React.createElement(WhiteSpace, null), /*#__PURE__*/React.createElement(Button, {
        onPress: infoToast
      }, "Text toast"), /*#__PURE__*/React.createElement(WhiteSpace, null), /*#__PURE__*/React.createElement(Button, {
        onPress: successToast
      }, "Success toast"), /*#__PURE__*/React.createElement(WhiteSpace, null), /*#__PURE__*/React.createElement(Button, {
        onPress: failToast
      }, "Failed toast"), /*#__PURE__*/React.createElement(WhiteSpace, null), /*#__PURE__*/React.createElement(Button, {
        onPress: offline
      }, "Network failure toast"), /*#__PURE__*/React.createElement(WhiteSpace, null), /*#__PURE__*/React.createElement(Button, {
        onPress: loadingToast
      }, "Loading toast"), /*#__PURE__*/React.createElement(WhiteSpace, null), /*#__PURE__*/React.createElement(Button, {
        onPress: this.alwaysShowToast
      }, "Toast with duration = 0"));
    }
  }]);

  return ToastExample;
}(React.Component);

export { ToastExample as default };