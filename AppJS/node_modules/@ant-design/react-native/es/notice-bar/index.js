import _extends from "@babel/runtime/helpers/esm/extends";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _createSuper from "@babel/runtime/helpers/esm/createSuper";
import React from 'react';
import { Text, TouchableWithoutFeedback, View } from 'react-native';
import Icon from '../icon';
import { WithTheme } from '../style';
import Marquee from './Marquee';
import NoticeStyles from './style/index';

var NoticeBar = /*#__PURE__*/function (_React$Component) {
  _inherits(NoticeBar, _React$Component);

  var _super = _createSuper(NoticeBar);

  function NoticeBar(props) {
    var _this;

    _classCallCheck(this, NoticeBar);

    _this = _super.call(this, props);

    _this.onPress = function () {
      var _this$props = _this.props,
          mode = _this$props.mode,
          onPress = _this$props.onPress;

      if (onPress) {
        onPress();
      }

      if (mode === 'closable') {
        _this.setState({
          show: false
        });
      }
    };

    _this.state = {
      show: true
    };
    return _this;
  }

  _createClass(NoticeBar, [{
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props2 = this.props,
          children = _this$props2.children,
          mode = _this$props2.mode,
          icon = _this$props2.icon,
          style = _this$props2.style,
          action = _this$props2.action,
          marqueeProps = _this$props2.marqueeProps;
      return /*#__PURE__*/React.createElement(WithTheme, {
        styles: this.props.styles,
        themeStyles: NoticeStyles
      }, function (styles, theme) {
        var operationDom = null;
        icon = typeof icon === 'undefined' ? /*#__PURE__*/React.createElement(Icon, {
          name: "sound",
          color: theme.brand_warning
        }) : icon;

        if (mode === 'closable') {
          operationDom = /*#__PURE__*/React.createElement(TouchableWithoutFeedback, {
            onPress: _this2.onPress
          }, /*#__PURE__*/React.createElement(View, {
            style: styles.actionWrap
          }, action ? action : /*#__PURE__*/React.createElement(Text, {
            style: [styles.close]
          }, "\xD7")));
        } else if (mode === 'link') {
          operationDom = /*#__PURE__*/React.createElement(View, {
            style: styles.actionWrap
          }, action ? action : /*#__PURE__*/React.createElement(Text, {
            style: [styles.link]
          }, "\u221F"));
        }

        var main = /*#__PURE__*/React.createElement(View, {
          style: [styles.notice, style]
        }, icon && /*#__PURE__*/React.createElement(View, {
          style: styles.left15
        }, icon), /*#__PURE__*/React.createElement(View, {
          style: [styles.container, icon ? styles.left6 : styles.left15]
        }, /*#__PURE__*/React.createElement(Marquee, _extends({
          style: styles.content,
          text: children
        }, marqueeProps))), operationDom);
        return _this2.state.show ? mode === 'closable' ? main : /*#__PURE__*/React.createElement(TouchableWithoutFeedback, {
          onPress: _this2.onPress
        }, main) : null;
      });
    }
  }]);

  return NoticeBar;
}(React.Component);

export { NoticeBar as default };
NoticeBar.defaultProps = {
  mode: '',
  onPress: function onPress() {}
};