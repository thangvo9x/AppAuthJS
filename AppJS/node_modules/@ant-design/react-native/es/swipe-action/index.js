import _extends from "@babel/runtime/helpers/esm/extends";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _createSuper from "@babel/runtime/helpers/esm/createSuper";

var __rest = this && this.__rest || function (s, e) {
  var t = {};

  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  }

  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};

import React from 'react';
import { Animated, I18nManager, StyleSheet, Text, View } from 'react-native';
import { RectButton } from 'react-native-gesture-handler';
import Swipeable from 'react-native-gesture-handler/Swipeable';

var SwipeAction = /*#__PURE__*/function (_React$Component) {
  _inherits(SwipeAction, _React$Component);

  var _super = _createSuper(SwipeAction);

  function SwipeAction() {
    var _this;

    _classCallCheck(this, SwipeAction);

    _this = _super.apply(this, arguments);

    _this.updateRef = function (ref) {
      _this.swipeableRow = ref;
    };

    _this.close = function () {
      var _a;

      (_a = _this.swipeableRow) === null || _a === void 0 ? void 0 : _a.close();
    };

    _this.renderActions = function (progress, _dragAnimatedValue) {
      var isLeft = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
      var _this$props = _this.props,
          right = _this$props.right,
          left = _this$props.left,
          _this$props$buttonWid = _this$props.buttonWidth,
          buttonWidth = _this$props$buttonWid === void 0 ? 60 : _this$props$buttonWid;
      var buttons = isLeft ? left : right;

      if (!buttons) {
        return null;
      }

      var len = buttons.length;
      var width = buttonWidth * len;
      return /*#__PURE__*/React.createElement(View, {
        style: {
          width: width,
          flexDirection: I18nManager.isRTL ? 'row-reverse' : 'row'
        }
      }, buttons.map(function (button, i) {
        var x = isLeft ? -i * buttonWidth : (len - i) * buttonWidth;
        var trans = progress.interpolate({
          inputRange: [0, 1],
          outputRange: [x, 0],
          extrapolate: 'clamp'
        });

        var pressHandler = function pressHandler() {
          if (button.disabled) {
            return;
          }

          _this.close();

          if (button.onPress) {
            button.onPress();
          }
        };

        return /*#__PURE__*/React.createElement(Animated.View, {
          key: i,
          style: {
            flex: 1,
            transform: [{
              translateX: trans
            }]
          }
        }, /*#__PURE__*/React.createElement(RectButton, {
          style: [styles.rightAction, {
            backgroundColor: button.backgroundColor
          }],
          onPress: pressHandler
        }, /*#__PURE__*/React.isValidElement(button.text) ? button.text : /*#__PURE__*/React.createElement(Text, {
          style: [styles.actionText, button.style, {
            color: button.color
          }]
        }, button.text)));
      }));
    };

    return _this;
  }

  _createClass(SwipeAction, [{
    key: "render",
    value: function render() {
      var _this2 = this;

      var _a = this.props,
          left = _a.left,
          right = _a.right,
          children = _a.children,
          restProps = __rest(_a, ["left", "right", "children"]);

      return /*#__PURE__*/React.createElement(Swipeable, _extends({
        ref: this.updateRef,
        friction: 2,
        enableTrackpadTwoFingerGesture: true,
        leftThreshold: 30,
        rightThreshold: 40,
        renderLeftActions: function renderLeftActions(v, d) {
          return _this2.renderActions(v, d, true);
        },
        renderRightActions: this.renderActions
      }, restProps), children);
    }
  }]);

  return SwipeAction;
}(React.Component);

export default SwipeAction;
var styles = StyleSheet.create({
  actionText: {
    color: 'white',
    fontSize: 16,
    backgroundColor: 'transparent',
    padding: 10
  },
  rightAction: {
    alignItems: 'center',
    flex: 1,
    justifyContent: 'center'
  }
});