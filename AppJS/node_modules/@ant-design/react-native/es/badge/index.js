import _extends from "@babel/runtime/helpers/esm/extends";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _createSuper from "@babel/runtime/helpers/esm/createSuper";

var __rest = this && this.__rest || function (s, e) {
  var t = {};

  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  }

  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};

import React from 'react';
import { Text, View } from 'react-native';
import { WithTheme } from '../style';
import BadgeStyles from './style/index';

var Badge = /*#__PURE__*/function (_React$Component) {
  _inherits(Badge, _React$Component);

  var _super = _createSuper(Badge);

  function Badge() {
    _classCallCheck(this, Badge);

    return _super.apply(this, arguments);
  }

  _createClass(Badge, [{
    key: "render",
    value: function render() {
      // tslint:disable:prefer-const
      var _a = this.props,
          styles = _a.styles,
          style = _a.style,
          children = _a.children,
          text = _a.text,
          size = _a.size,
          overflowCount = _a.overflowCount,
          dot = _a.dot,
          corner = _a.corner,
          restProps = __rest(_a, ["styles", "style", "children", "text", "size", "overflowCount", "dot", "corner"]);

      return /*#__PURE__*/React.createElement(WithTheme, {
        themeStyles: BadgeStyles,
        styles: this.props.styles
      }, function (s) {
        text = typeof text === 'number' && text > overflowCount ? "".concat(overflowCount, "+") : text; // dot mode don't need text

        if (dot) {
          text = '';
        } // fake styles


        var fakeStyles = s;
        var badgeCls = corner ? 'textCorner' : 'textDom';
        var contentDom = !dot ? /*#__PURE__*/React.createElement(View, _extends({}, restProps, {
          style: [s[badgeCls], fakeStyles["".concat(badgeCls).concat(size)]]
        }), /*#__PURE__*/React.createElement(Text, {
          style: [s.text]
        }, text)) : /*#__PURE__*/React.createElement(View, _extends({}, restProps, {
          style: [s.dot, fakeStyles["dotSize".concat(size)]]
        }));
        return /*#__PURE__*/React.createElement(View, {
          style: [s.wrap, style]
        }, /*#__PURE__*/React.createElement(View, {
          style: [fakeStyles["".concat(badgeCls, "Wrap")]]
        }, children, text || dot ? contentDom : null));
      });
    }
  }]);

  return Badge;
}(React.Component);

export { Badge as default };
Badge.defaultProps = {
  size: 'small',
  overflowCount: 99,
  dot: false,
  corner: false
};