import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _createSuper from "@babel/runtime/helpers/esm/createSuper";
import React from 'react';
import { View } from 'react-native';
import LocaleProvider from '..';
import { DatePicker, List, Pagination, Picker, SearchBar, WhiteSpace, WingBlank } from '../../';
import enUS from '../en_US';
import esES from '../es_ES';
import ptBR from '../pt_BR';
import ruRU from '../ru_RU';
import zhCN from '../zh_CN';
var maxDate = new Date(2018, 11, 3, 22, 0);
var minDate = new Date(2015, 7, 6, 8, 30);
var seasons = [[{
  label: '2013',
  value: '2013'
}, {
  label: '2014',
  value: '2014'
}], [{
  label: '春',
  value: '春'
}, {
  label: '夏',
  value: '夏'
}]];
var Page = /*#__PURE__*/React.memo(function () {
  return /*#__PURE__*/React.createElement(View, null, /*#__PURE__*/React.createElement(Pagination, {
    total: 5,
    current: 1
  }), /*#__PURE__*/React.createElement(WhiteSpace, null), /*#__PURE__*/React.createElement(List, {
    style: {
      backgroundColor: 'white'
    }
  }, /*#__PURE__*/React.createElement(DatePicker, {
    mode: "date",
    title: "Select date",
    minDate: minDate,
    maxDate: maxDate
  }, /*#__PURE__*/React.createElement(List.Item, {
    arrow: "horizontal"
  }, "DatePicker")), /*#__PURE__*/React.createElement(Picker, {
    data: seasons,
    cascade: false
  }, /*#__PURE__*/React.createElement(List.Item, {
    arrow: "horizontal"
  }, "Picker")), /*#__PURE__*/React.createElement(WhiteSpace, null), /*#__PURE__*/React.createElement(SearchBar, {
    placeholder: "Search",
    showCancelButton: true
  })));
});

var LocaleProviderExample = /*#__PURE__*/function (_React$Component) {
  _inherits(LocaleProviderExample, _React$Component);

  var _super = _createSuper(LocaleProviderExample);

  function LocaleProviderExample(props) {
    var _this;

    _classCallCheck(this, LocaleProviderExample);

    _this = _super.call(this, props);

    _this.onChange = function (value) {
      _this.setState({
        locale: value[0]
      });
    };

    _this.state = {
      locale: 'English'
    };
    return _this;
  }

  _createClass(LocaleProviderExample, [{
    key: "render",
    value: function render() {
      var locale = this.state.locale;
      var languages = [{
        value: '中国',
        label: '中国',
        language: zhCN
      }, {
        value: 'English',
        label: 'English',
        language: enUS
      }, {
        value: 'Русский',
        label: 'Русский',
        language: ruRU
      }, {
        value: 'Español',
        label: 'Español',
        language: esES
      }, {
        value: 'Português - BR',
        label: 'Português - BR',
        language: ptBR
      }];
      var currentLocale = languages.find(function (item) {
        return item.value === locale;
      }).language;
      return /*#__PURE__*/React.createElement(WingBlank, null, /*#__PURE__*/React.createElement(Picker, {
        data: languages,
        onChange: this.onChange,
        cols: 1,
        value: [locale]
      }, /*#__PURE__*/React.createElement(List.Item, {
        arrow: "horizontal"
      }, "Choose language")), /*#__PURE__*/React.createElement(WhiteSpace, null), /*#__PURE__*/React.createElement(LocaleProvider, {
        locale: currentLocale
      }, /*#__PURE__*/React.createElement(Page, null)));
    }
  }]);

  return LocaleProviderExample;
}(React.Component);

export { LocaleProviderExample as default };