import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _createSuper from "@babel/runtime/helpers/esm/createSuper";
import React from 'react';
import { Animated, Dimensions, View } from 'react-native';
import { WithTheme } from '../style';
import ProgressStyles from './style/index';

var Progress = /*#__PURE__*/function (_React$Component) {
  _inherits(Progress, _React$Component);

  var _super = _createSuper(Progress);

  function Progress(props) {
    var _this;

    _classCallCheck(this, Progress);

    _this = _super.call(this, props);

    _this.onLayout = function (e) {
      _this.setState({
        wrapWidth: e.nativeEvent.layout.width
      });
    };

    _this.normalPercent = function (percent) {
      var widthPercent = 0;

      if (percent !== undefined && percent > 0) {
        widthPercent = percent > 100 ? 100 : percent;
      }

      return widthPercent;
    };

    _this.getWidth = function () {
      var percent = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _this.props.percent;
      return _this.state.wrapWidth * (_this.normalPercent(percent) / 100);
    };

    _this.state = {
      wrapWidth: props.wrapWidth || Dimensions.get('window').width,
      percentage: new Animated.Value(0)
    };
    return _this;
  }

  _createClass(Progress, [{
    key: "UNSAFE_componentWillReceiveProps",
    value: function UNSAFE_componentWillReceiveProps(nextProps) {
      if (nextProps.wrapWidth !== this.props.wrapWidth) {
        this.setState({
          wrapWidth: nextProps.wrapWidth
        });
      }

      if (this.props.appearTransition && nextProps.percent !== this.props.percent) {
        this.setState({
          percentage: new Animated.Value(this.getWidth(nextProps.percent))
        });
      }
    }
  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      if (this.props.appearTransition) {
        this.state.percentage.setValue(0);
        Animated.timing(this.state.percentage, {
          toValue: this.getWidth(),
          duration: 1000,
          useNativeDriver: true
        }).start();
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props = this.props,
          position = _this$props.position,
          unfilled = _this$props.unfilled,
          style = _this$props.style,
          barStyle = _this$props.barStyle;
      var percentStyle = {
        width: this.getWidth(),
        height: 0
      };
      return /*#__PURE__*/React.createElement(WithTheme, {
        styles: this.props.styles,
        themeStyles: ProgressStyles
      }, function (styles) {
        var child = /*#__PURE__*/React.createElement(View, {
          style: [styles.progressBar, percentStyle, barStyle]
        });

        if (_this2.props.appearTransition) {
          percentStyle.width = _this2.state.percentage;
          child = /*#__PURE__*/React.createElement(Animated.View, {
            style: [styles.progressBar, percentStyle, barStyle]
          });
        }

        var outerStyle = [styles.progressOuter, position === 'fixed' ? {
          position: 'absolute',
          top: 0
        } : {}, !unfilled ? {
          backgroundColor: 'transparent'
        } : {}, style];
        return /*#__PURE__*/React.createElement(View, {
          onLayout: _this2.onLayout,
          style: outerStyle
        }, child);
      });
    }
  }]);

  return Progress;
}(React.Component);

export { Progress as default };
Progress.defaultProps = {
  percent: 0,
  position: 'normal',
  unfilled: true,
  appearTransition: false
};