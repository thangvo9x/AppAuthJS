import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _createSuper from "@babel/runtime/helpers/esm/createSuper";
import React from 'react';
import { Image, Text, View } from 'react-native';
import Button from '../button/index';
import { WithTheme } from '../style';
import ResultStyles from './style/index';

var Result = /*#__PURE__*/function (_React$Component) {
  _inherits(Result, _React$Component);

  var _super = _createSuper(Result);

  function Result() {
    _classCallCheck(this, Result);

    return _super.apply(this, arguments);
  }

  _createClass(Result, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          style = _this$props.style,
          img = _this$props.img,
          imgUrl = _this$props.imgUrl,
          title = _this$props.title,
          message = _this$props.message,
          buttonText = _this$props.buttonText,
          onButtonClick = _this$props.onButtonClick,
          buttonType = _this$props.buttonType;
      return /*#__PURE__*/React.createElement(WithTheme, {
        styles: this.props.styles,
        themeStyles: ResultStyles
      }, function (styles) {
        var imgContent = null;

        if (img) {
          imgContent = /*#__PURE__*/React.createElement(View, {
            style: styles.imgWrap
          }, img);
        } else if (imgUrl) {
          imgContent = /*#__PURE__*/React.createElement(View, {
            style: styles.imgWrap
          }, /*#__PURE__*/React.createElement(Image, {
            source: imgUrl,
            style: styles.img
          }));
        }

        return /*#__PURE__*/React.createElement(View, {
          style: [styles.result, style]
        }, imgContent, title ? /*#__PURE__*/React.createElement(View, {
          style: styles.title
        }, typeof title === 'string' ? /*#__PURE__*/React.createElement(Text, {
          style: styles.titleText
        }, title) : title) : null, message ? /*#__PURE__*/React.createElement(View, {
          style: styles.message
        }, typeof message === 'string' ? /*#__PURE__*/React.createElement(Text, {
          style: styles.messageText
        }, message) : message) : null, buttonText ? /*#__PURE__*/React.createElement(View, {
          style: styles.buttonWrap
        }, /*#__PURE__*/React.createElement(Button, {
          style: styles.button,
          type: buttonType,
          onPress: onButtonClick
        }, buttonText)) : null);
      });
    }
  }]);

  return Result;
}(React.Component);

export { Result as default };