"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _createSuper2 = _interopRequireDefault(require("@babel/runtime/helpers/createSuper"));

var _react = _interopRequireDefault(require("react"));

var _reactNative = require("react-native");

var _reactNativePagerView = _interopRequireDefault(require("react-native-pager-view"));

var _style = require("../style");

var _index = _interopRequireDefault(require("./style/index"));

var defaultPagination = function defaultPagination(props) {
  var styles = props.styles,
      current = props.current,
      vertical = props.vertical,
      count = props.count,
      dotStyle = props.dotStyle,
      dotActiveStyle = props.dotActiveStyle;
  var positionStyle = vertical ? 'paginationY' : 'paginationX';
  var flexDirection = vertical ? 'column' : 'row';
  var arr = [];

  for (var i = 0; i < count; i++) {
    arr.push( /*#__PURE__*/_react["default"].createElement(_reactNative.View, {
      key: "dot-".concat(i),
      style: [styles.pointStyle, styles.spaceStyle, dotStyle, i === current && styles.pointActiveStyle, i === current && dotActiveStyle]
    }));
  }

  return /*#__PURE__*/_react["default"].createElement(_reactNative.View, {
    style: [styles.pagination, styles[positionStyle]]
  }, /*#__PURE__*/_react["default"].createElement(_reactNative.View, {
    style: {
      flexDirection: flexDirection
    }
  }, arr));
};

var Carousel = /*#__PURE__*/function (_React$Component) {
  (0, _inherits2["default"])(Carousel, _React$Component);

  var _super = (0, _createSuper2["default"])(Carousel);

  function Carousel(props) {
    var _this;

    (0, _classCallCheck2["default"])(this, Carousel);
    _this = _super.call(this, props);
    _this.viewPager = /*#__PURE__*/_react["default"].createRef();

    _this.getChildrenCount = function (children) {
      var count = children ? _react["default"].Children.count(children) || 1 : 0;
      return count;
    };

    _this.autoplay = function () {
      var stop = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

      if (stop) {
        clearTimeout(_this.autoplayTimer);
        return;
      }

      var _this$props = _this.props,
          children = _this$props.children,
          autoplay = _this$props.autoplay,
          infinite = _this$props.infinite,
          autoplayInterval = _this$props.autoplayInterval;
      var _this$state = _this.state,
          isScrolling = _this$state.isScrolling,
          selectedIndex = _this$state.selectedIndex;

      var count = _this.getChildrenCount(children);

      if (!Array.isArray(children) || !autoplay || isScrolling) {
        return;
      }

      clearTimeout(_this.autoplayTimer);
      _this.autoplayTimer = setTimeout(function () {
        var newIndex = selectedIndex < count ? selectedIndex + 1 : 0;

        if (selectedIndex === count - 1) {
          newIndex = 0;

          if (!infinite) {
            clearTimeout(_this.autoplayTimer);
            return;
          }
        }

        _this.goTo(newIndex);
      }, autoplayInterval);
    };

    _this.renderDots = function (index) {
      var _this$props2 = _this.props,
          children = _this$props2.children,
          vertical = _this$props2.vertical,
          pagination = _this$props2.pagination,
          dotStyle = _this$props2.dotStyle,
          dotActiveStyle = _this$props2.dotActiveStyle;

      if (!pagination) {
        return null;
      }

      var count = _this.getChildrenCount(children);

      return /*#__PURE__*/_react["default"].createElement(_style.WithTheme, {
        themeStyles: _index["default"],
        styles: _this.props.styles
      }, function (styles) {
        return pagination({
          styles: styles,
          vertical: vertical,
          current: index,
          count: count,
          dotStyle: dotStyle,
          dotActiveStyle: dotActiveStyle
        });
      });
    };

    var _this$props3 = _this.props,
        children = _this$props3.children,
        selectedIndex = _this$props3.selectedIndex;

    var count = _this.getChildrenCount(children);

    var index = count > 1 ? Math.min(selectedIndex, count - 1) : 0;
    _this.state = {
      isScrolling: false,
      selectedIndex: index
    };
    return _this;
  }

  (0, _createClass2["default"])(Carousel, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.autoplay();
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      clearTimeout(this.autoplayTimer);
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      if (prevProps.autoplay !== undefined && prevProps.autoplay !== this.props.autoplay) {
        this.autoplay(!this.props.autoplay);
      }
    }
    /**
     * go to index
     * @param index
     */

  }, {
    key: "goTo",
    value: function goTo(index) {
      this.setState({
        selectedIndex: index
      }); // @ts-ignore

      this.viewPager.current.setPage(index);
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var selectedIndex = this.state.selectedIndex;
      var _this$props4 = this.props,
          dots = _this$props4.dots,
          children = _this$props4.children,
          vertical = _this$props4.vertical;

      if (!children) {
        return /*#__PURE__*/_react["default"].createElement(_reactNative.Text, {
          style: {
            backgroundColor: 'white'
          }
        }, "You are supposed to add children inside Carousel");
      }

      var count = this.getChildrenCount(children);
      var pages;

      if (count > 1) {
        var childrenArray = _react["default"].Children.toArray(children);

        pages = childrenArray.map(function (page, i) {
          return (
            /*#__PURE__*/
            // when vertical, use the height of the first child as the height of the Carousel
            _react["default"].createElement(_reactNative.View, {
              key: i
            }, page)
          );
        });
      } else {
        pages = /*#__PURE__*/_react["default"].createElement(_reactNative.View, null, children);
      }

      var vpProps = {
        initialPage: selectedIndex,
        showPageIndicator: false,
        children: pages,
        onPageSelected: function onPageSelected(e) {
          _this2.setState({
            selectedIndex: e.nativeEvent.position
          });

          _this2.autoplay();

          if (_this2.props.afterChange) {
            _this2.props.afterChange(e.nativeEvent.position);
          }
        },
        onPageScrollStateChanged: function onPageScrollStateChanged(e) {
          switch (e.nativeEvent.pageScrollState) {
            case 'dragging':
              _this2.autoplay(true);

              _this2.setState({
                isScrolling: true
              });

              break;

            case 'idle':
            case 'settling':
              _this2.autoplay();

              _this2.setState({
                isScrolling: false
              });

            default:
              break;
          }
        }
      };
      return /*#__PURE__*/_react["default"].createElement(_style.WithTheme, {
        themeStyles: _index["default"],
        styles: this.props.styles
      }, function (styles) {
        return /*#__PURE__*/_react["default"].createElement(_reactNative.View, {
          style: [styles.wrapperStyle]
        }, /*#__PURE__*/_react["default"].createElement(_reactNativePagerView["default"], (0, _extends2["default"])({}, vpProps, {
          style: _this2.props.style,
          // Lib does not support dynamically orientation change
          orientation: vertical ? 'vertical' : 'horizontal',
          // Lib does not support dynamically transitionStyle change
          transitionStyle: "scroll",
          ref: _this2.viewPager
        }), pages), dots && _this2.renderDots(selectedIndex));
      });
    }
  }]);
  return Carousel;
}(_react["default"].Component);

Carousel.defaultProps = {
  infinite: false,
  dots: true,
  autoplay: false,
  autoplayInterval: 3000,
  selectedIndex: 0,
  vertical: false,
  pagination: defaultPagination,
  dotStyle: {},
  dotActiveStyle: {}
};
var _default = Carousel;
exports["default"] = _default;