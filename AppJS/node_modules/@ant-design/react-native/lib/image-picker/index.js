"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _createSuper2 = _interopRequireDefault(require("@babel/runtime/helpers/createSuper"));

var _react = _interopRequireDefault(require("react"));

var _reactNative = require("react-native");

var _style = require("../style");

var _ImageRoll = _interopRequireDefault(require("./ImageRoll"));

var _index = _interopRequireDefault(require("./style/index"));

var ImagePicker = /*#__PURE__*/function (_React$Component) {
  (0, _inherits2["default"])(ImagePicker, _React$Component);

  var _super = (0, _createSuper2["default"])(ImagePicker);

  function ImagePicker(props) {
    var _this;

    (0, _classCallCheck2["default"])(this, ImagePicker);
    _this = _super.call(this, props);

    _this.onPressIn = function (styles) {
      return function () {
        _this.plusWrap.setNativeProps({
          style: [styles.item, styles.size, styles.plusWrapHighlight]
        });
      };
    };

    _this.onPressOut = function (styles) {
      return function () {
        _this.plusWrap.setNativeProps({
          style: [styles.item, styles.size, styles.plusWrapNormal]
        });
      };
    };

    _this.showPicker = function () {
      if (_this.props.onAddImageClick) {
        _this.props.onAddImageClick();

        return;
      }

      _this.setState({
        visible: true
      });
    };

    _this.hideImageRoll = function () {
      _this.setState({
        visible: false
      });

      if (_this.props.onFail) {
        _this.props.onFail('cancel image selection');
      }
    };

    _this.state = {
      visible: false
    };
    return _this;
  }

  (0, _createClass2["default"])(ImagePicker, [{
    key: "addImage",
    value: function addImage(imageObj) {
      if (!imageObj.url) {
        imageObj.url = imageObj.uri;
        delete imageObj.uri;
      }

      var _this$props$files = this.props.files,
          files = _this$props$files === void 0 ? [] : _this$props$files;
      var newImages = files.concat(imageObj);

      if (this.props.onChange) {
        this.props.onChange(newImages, 'add');
      }
    }
  }, {
    key: "removeImage",
    value: function removeImage(idx) {
      var newImages = [];
      var _this$props$files2 = this.props.files,
          files = _this$props$files2 === void 0 ? [] : _this$props$files2;
      files.forEach(function (image, index) {
        if (index !== idx) {
          newImages.push(image);
        }
      });

      if (this.props.onChange) {
        this.props.onChange(newImages, 'remove', idx);
      }
    }
  }, {
    key: "onImageClick",
    value: function onImageClick(index) {
      if (this.props.onImageClick) {
        this.props.onImageClick(index, this.props.files);
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props = this.props,
          _this$props$files3 = _this$props.files,
          files = _this$props$files3 === void 0 ? [] : _this$props$files3,
          selectable = _this$props.selectable,
          cameraPickerProps = _this$props.cameraPickerProps;
      return /*#__PURE__*/_react["default"].createElement(_style.WithTheme, {
        styles: this.props.styles,
        themeStyles: _index["default"]
      }, function (styles) {
        var filesView = files.map(function (item, index) {
          return /*#__PURE__*/_react["default"].createElement(_reactNative.View, {
            key: index,
            style: [styles.item, styles.size]
          }, /*#__PURE__*/_react["default"].createElement(_reactNative.TouchableOpacity, {
            onPress: function onPress() {
              return _this2.onImageClick(index);
            },
            activeOpacity: 0.6
          }, /*#__PURE__*/_react["default"].createElement(_reactNative.Image, {
            source: {
              uri: item.url
            },
            style: [styles.size, styles.image]
          })), /*#__PURE__*/_react["default"].createElement(_reactNative.TouchableOpacity, {
            onPress: function onPress() {
              return _this2.removeImage(index);
            },
            style: styles.closeWrap,
            activeOpacity: 0.6
          }, /*#__PURE__*/_react["default"].createElement(_reactNative.Text, {
            style: styles.closeText
          }, "\xD7")));
        });

        var imageRollEl = /*#__PURE__*/_react["default"].createElement(_ImageRoll["default"], {
          onCancel: _this2.hideImageRoll,
          onSelected: function onSelected(imgObj) {
            return _this2.addImage(imgObj);
          },
          title: _this2.props.title,
          cancelText: _this2.props.cancelText,
          cameraPickerProps: cameraPickerProps
        });

        return /*#__PURE__*/_react["default"].createElement(_reactNative.View, {
          style: styles.container
        }, filesView, selectable && /*#__PURE__*/_react["default"].createElement(_reactNative.TouchableWithoutFeedback, {
          onPress: _this2.showPicker,
          onPressIn: _this2.onPressIn(styles),
          onPressOut: _this2.onPressOut(styles)
        }, /*#__PURE__*/_react["default"].createElement(_reactNative.View, {
          ref: function ref(conponent) {
            return _this2.plusWrap = conponent;
          },
          style: [styles.item, styles.size, styles.plusWrap, styles.plusWrapNormal]
        }, /*#__PURE__*/_react["default"].createElement(_reactNative.Text, {
          style: [styles.plusText]
        }, "+"))), _this2.state.visible ? imageRollEl : null);
      });
    }
  }]);
  return ImagePicker;
}(_react["default"].Component);

exports["default"] = ImagePicker;
ImagePicker.defaultProps = {
  onChange: function onChange() {},
  onFail: function onFail() {},
  files: [],
  selectable: true
};