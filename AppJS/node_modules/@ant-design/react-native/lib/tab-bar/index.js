"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _createSuper2 = _interopRequireDefault(require("@babel/runtime/helpers/createSuper"));

var _react = _interopRequireDefault(require("react"));

var _reactNative = require("react-native");

var _style = require("../style");

var _index = _interopRequireDefault(require("./style/index"));

var _TabBarItem = _interopRequireDefault(require("./TabBarItem"));

var TabBar = /*#__PURE__*/function (_React$Component) {
  (0, _inherits2["default"])(TabBar, _React$Component);

  var _super = (0, _createSuper2["default"])(TabBar);

  function TabBar() {
    (0, _classCallCheck2["default"])(this, TabBar);
    return _super.apply(this, arguments);
  }

  (0, _createClass2["default"])(TabBar, [{
    key: "getPanes",
    value: function getPanes(styles, content) {
      var _this$props = this.props,
          tintColor = _this$props.tintColor,
          unselectedTintColor = _this$props.unselectedTintColor,
          children = _this$props.children; // ios 规则： selected 为多个则只选中最后一个， selected 为 0 个则选中第一个;

      var selectedIndex = 0;
      [].concat(children).forEach(function (child, idx) {
        if (child.props.selected) {
          selectedIndex = idx;
        }
      });
      var newChildren = [];

      _react["default"].Children.map(children, function (child, idx) {
        if (content && selectedIndex === idx) {
          newChildren.push( /*#__PURE__*/_react["default"].createElement(_reactNative.View, {
            key: idx,
            style: [styles.contentItem, idx === selectedIndex ? styles.contentItemSelected : undefined]
          }, child.props.children));
        } else {
          newChildren.push( /*#__PURE__*/_react["default"].cloneElement(child, {
            key: idx,
            tintColor: tintColor,
            unselectedTintColor: unselectedTintColor,
            styles: styles
          }));
        }
      });

      if (content) {
        return newChildren.filter(function (_, i) {
          return i === selectedIndex;
        });
      }

      return newChildren;
    }
  }, {
    key: "render",
    value: function render() {
      var _this = this;

      var style = {
        backgroundColor: this.props.barTintColor
      };
      return /*#__PURE__*/_react["default"].createElement(_reactNative.SafeAreaView, {
        style: [{
          flex: 1
        }, style]
      }, /*#__PURE__*/_react["default"].createElement(_style.WithTheme, {
        styles: this.props.styles,
        themeStyles: _index["default"]
      }, function (styles) {
        return /*#__PURE__*/_react["default"].createElement(_reactNative.View, {
          style: styles.tabbar
        }, /*#__PURE__*/_react["default"].createElement(_reactNative.View, {
          style: styles.content
        }, _this.getPanes(styles, true)), /*#__PURE__*/_react["default"].createElement(_reactNative.View, {
          style: [style, styles.tabs]
        }, _this.getPanes(styles, false)));
      }));
    }
  }]);
  return TabBar;
}(_react["default"].Component);

TabBar.defaultProps = {
  barTintColor: 'white',
  tintColor: '#108ee9',
  unselectedTintColor: '#888'
};
TabBar.Item = _TabBarItem["default"];
var _default = TabBar;
exports["default"] = _default;