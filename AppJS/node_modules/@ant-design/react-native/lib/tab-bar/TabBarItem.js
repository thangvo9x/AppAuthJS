"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _createSuper2 = _interopRequireDefault(require("@babel/runtime/helpers/createSuper"));

var _react = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _icon = _interopRequireDefault(require("../icon"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var TabBarItem = /*#__PURE__*/function (_React$Component) {
  (0, _inherits2["default"])(TabBarItem, _React$Component);

  var _super = (0, _createSuper2["default"])(TabBarItem);

  function TabBarItem() {
    (0, _classCallCheck2["default"])(this, TabBarItem);
    return _super.apply(this, arguments);
  }

  (0, _createClass2["default"])(TabBarItem, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          title = _this$props.title,
          selected = _this$props.selected,
          tintColor = _this$props.tintColor,
          unselectedTintColor = _this$props.unselectedTintColor,
          icon = _this$props.icon,
          selectedIcon = _this$props.selectedIcon,
          onPress = _this$props.onPress,
          badge = _this$props.badge,
          iconStyle = _this$props.iconStyle;
      var styles = this.props.styles;
      var itemSelectedStyle = selected ? styles.barItemSelected : null;
      var badgeDom = badge ? /*#__PURE__*/_react["default"].createElement(_reactNative.View, {
        style: [styles.badge]
      }, /*#__PURE__*/_react["default"].createElement(_reactNative.Text, {
        style: [styles.badgeText]
      }, badge)) : null; // icon

      var source = selected && selectedIcon !== undefined ? selectedIcon : icon !== undefined ? icon : null;
      var color = selected ? tintColor : unselectedTintColor;
      var isIcon = source && source.type && source.type.displayName === 'Icon';
      return /*#__PURE__*/_react["default"].createElement(_reactNative.TouchableWithoutFeedback, {
        onPress: onPress
      }, /*#__PURE__*/_react["default"].createElement(_reactNative.View, {
        style: [styles.barItem, itemSelectedStyle]
      }, /*#__PURE__*/_react["default"].createElement(_reactNative.View, null, source === null ? null : /*#__PURE__*/(0, _react.isValidElement)(source) ? isIcon ? /*#__PURE__*/_react["default"].createElement(_icon["default"], (0, _extends2["default"])({
        color: color
      }, source.props)) : source : /*#__PURE__*/_react["default"].createElement(_reactNative.Image, {
        source: source,
        style: [styles.barIcon, iconStyle]
      }), badgeDom), /*#__PURE__*/_react["default"].createElement(_reactNative.Text, {
        style: [styles.barItemTitle, {
          color: color
        }]
      }, title)));
    }
  }]);
  return TabBarItem;
}(_react["default"].Component);

exports["default"] = TabBarItem;
TabBarItem.defaultProps = {
  onPress: function onPress() {}
};