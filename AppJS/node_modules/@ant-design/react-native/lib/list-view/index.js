"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _createSuper2 = _interopRequireDefault(require("@babel/runtime/helpers/createSuper"));

var _reactNativeUltimateListview = require("@bang88/react-native-ultimate-listview");

var _react = _interopRequireDefault(require("react"));

var _reactNative = require("react-native");

var _icon = _interopRequireDefault(require("../icon"));

var _getLocale = require("../_util/getLocale");

var _zh_CN = _interopRequireDefault(require("./locale/zh_CN"));

var _localeProvider = require("../locale-provider");

var __rest = void 0 && (void 0).__rest || function (s, e) {
  var t = {};

  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  }

  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};

var ListView = /*#__PURE__*/function (_React$PureComponent) {
  (0, _inherits2["default"])(ListView, _React$PureComponent);

  var _super = (0, _createSuper2["default"])(ListView);

  function ListView() {
    var _this;

    (0, _classCallCheck2["default"])(this, ListView);
    _this = _super.apply(this, arguments);

    _this.refresh = function () {
      if (_this.ulv) {
        _this.ulv.refresh();
      }
    };

    return _this;
  }

  (0, _createClass2["default"])(ListView, [{
    key: "render",
    value: function render() {
      var _this2 = this;

      var _a = this.props,
          renderItem = _a.renderItem,
          props = __rest(_a, ["renderItem"]); // tslint:disable-next-line:variable-name


      var locale = (0, _getLocale.getComponentLocale)(this.props, this.context, 'ListView', function () {
        return _zh_CN["default"];
      });
      return /*#__PURE__*/_react["default"].createElement(_reactNativeUltimateListview.UltimateListView, (0, _extends2["default"])({
        key: "ant-list-view",
        keyExtractor: function keyExtractor(_, index) {
          return "item-".concat(index);
        },
        refreshableMode: _reactNative.Platform.OS === 'ios' ? 'advanced' : 'basic',
        numColumns: 1,
        waitingSpinnerText: locale.loading,
        allLoadedText: locale.done,
        refreshableTitlePull: locale.refreshableTitlePull,
        refreshableTitleRelease: locale.refreshableTitleRelease,
        refreshableTitleRefreshing: locale.refreshableTitleRefreshing,
        emptyView: function emptyView() {
          return _this2.props.emptyView ? _this2.props.emptyView() : /*#__PURE__*/_react["default"].createElement(_reactNative.View, {
            style: {
              flex: 1,
              alignItems: 'center',
              justifyContent: 'center'
            }
          }, /*#__PURE__*/_react["default"].createElement(_reactNative.Text, {
            style: {
              textAlign: 'center',
              padding: '10%'
            }
          }, locale.noData));
        },
        customRefreshView: function customRefreshView(status) {
          return /*#__PURE__*/_react["default"].createElement(_reactNative.View, {
            style: {
              flexDirection: 'row'
            }
          }, status === 2 ? /*#__PURE__*/_react["default"].createElement(_reactNative.ActivityIndicator, null) : /*#__PURE__*/_react["default"].createElement(_icon["default"], {
            name: status === 0 ? 'arrow-down' : 'arrow-up',
            size: 18
          }), /*#__PURE__*/_react["default"].createElement(_reactNative.Text, {
            style: {
              marginLeft: 5
            }
          }, status === 0 ? locale.refreshableTitlePull : status === 1 ? locale.refreshableTitleRelease : locale.refreshableTitleRefreshing));
        }
      }, props, {
        item: renderItem,
        ref: function ref(_ref) {
          return _this2.ulv = _ref;
        }
      }));
    }
  }]);
  return ListView;
}(_react["default"].PureComponent);

ListView.contextType = _localeProvider.LocaleContext;
var _default = ListView;
exports["default"] = _default;