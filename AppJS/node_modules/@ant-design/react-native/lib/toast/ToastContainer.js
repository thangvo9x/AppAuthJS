"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _createSuper2 = _interopRequireDefault(require("@babel/runtime/helpers/createSuper"));

var _react = _interopRequireDefault(require("react"));

var _reactNative = require("react-native");

var _icon = _interopRequireDefault(require("../icon"));

var _style = require("../style");

var _index = _interopRequireDefault(require("./style/index"));

var ToastContainer = /*#__PURE__*/function (_React$Component) {
  (0, _inherits2["default"])(ToastContainer, _React$Component);

  var _super = (0, _createSuper2["default"])(ToastContainer);

  function ToastContainer(props) {
    var _this;

    (0, _classCallCheck2["default"])(this, ToastContainer);
    _this = _super.call(this, props);
    _this.state = {
      fadeAnim: new _reactNative.Animated.Value(0)
    };
    return _this;
  }

  (0, _createClass2["default"])(ToastContainer, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this2 = this;

      var _this$props = this.props,
          onClose = _this$props.onClose,
          onAnimationEnd = _this$props.onAnimationEnd;
      var duration = this.props.duration;
      var timing = _reactNative.Animated.timing;

      if (this.anim) {
        this.anim = null;
      }

      var animArr = [timing(this.state.fadeAnim, {
        toValue: 1,
        duration: 200,
        useNativeDriver: true
      }), _reactNative.Animated.delay(duration * 1000)];

      if (duration > 0) {
        animArr.push(timing(this.state.fadeAnim, {
          toValue: 0,
          duration: 200,
          useNativeDriver: true
        }));
      }

      this.anim = _reactNative.Animated.sequence(animArr);
      this.anim.start(function () {
        if (duration > 0) {
          _this2.anim = null;

          if (onClose) {
            onClose();
          }

          if (onAnimationEnd) {
            onAnimationEnd();
          }
        }
      });
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      if (this.anim) {
        this.anim.stop();
        this.anim = null;
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this3 = this;

      var _this$props2 = this.props,
          _this$props2$type = _this$props2.type,
          type = _this$props2$type === void 0 ? '' : _this$props2$type,
          content = _this$props2.content,
          mask = _this$props2.mask;
      return /*#__PURE__*/_react["default"].createElement(_style.WithTheme, {
        styles: this.props.styles,
        themeStyles: _index["default"]
      }, function (styles) {
        var iconType = {
          success: 'check-circle',
          fail: 'close-circle',
          offline: 'frown'
        };
        var iconDom = null;

        if (type === 'loading') {
          iconDom = /*#__PURE__*/_react["default"].createElement(_reactNative.ActivityIndicator, {
            animating: true,
            style: [styles.centering],
            color: "white",
            size: "large"
          });
        } else if (type === 'info') {
          iconDom = null;
        } else {
          iconDom = /*#__PURE__*/_react["default"].createElement(_icon["default"], {
            name: iconType[type],
            style: styles.image,
            color: "white",
            size: 36
          });
        }

        return /*#__PURE__*/_react["default"].createElement(_reactNative.View, {
          style: [styles.container],
          pointerEvents: mask ? undefined : 'box-none'
        }, /*#__PURE__*/_react["default"].createElement(_reactNative.View, {
          style: [styles.innerContainer]
        }, /*#__PURE__*/_react["default"].createElement(_reactNative.Animated.View, {
          style: {
            opacity: _this3.state.fadeAnim
          }
        }, /*#__PURE__*/_react["default"].createElement(_reactNative.View, {
          style: [styles.innerWrap, iconDom ? styles.iconToast : styles.textToast]
        }, iconDom, /*#__PURE__*/_react["default"].createElement(_reactNative.Text, {
          style: styles.content
        }, content)))));
      });
    }
  }]);
  return ToastContainer;
}(_react["default"].Component);

exports["default"] = ToastContainer;
ToastContainer.defaultProps = {
  duration: 3,
  mask: true,
  onClose: function onClose() {}
};