"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _createSuper2 = _interopRequireDefault(require("@babel/runtime/helpers/createSuper"));

var _react = _interopRequireDefault(require("react"));

var _reactNative = require("react-native");

var _ = require("../../");

/* tslint:disable:no-console */
function showToastStack() {
  // multiple toast
  _.Toast.fail({
    content: 'This is a toast tips 1 !!!',
    duration: 3,
    stackable: true
  });

  _.Toast.success({
    content: 'This is a toast tips 2 !!!',
    duration: 2,
    stackable: true
  });

  _.Toast.info({
    content: 'This is a toast tips 3 !!!',
    duration: 1,
    stackable: true
  });
}

function infoToast() {
  _.Toast.info({
    content: 'Text toast'
  });
}

function successToast() {
  _.Toast.success('Load success !!!', 1);
}

function showToastNoMask() {
  _.Toast.info({
    content: 'Toast without mask',
    mask: false
  });
}

function failToast() {
  _.Toast.fail('Load failed !!!');
}

function offline() {
  _.Toast.offline('Network connection failed !!!');
}

function loadingToast() {
  _.Toast.loading({
    content: 'Loading...',
    duration: 1,
    onClose: function onClose() {
      return console.log('Load complete !!!');
    }
  });
}

var ToastExample = /*#__PURE__*/function (_React$Component) {
  (0, _inherits2["default"])(ToastExample, _React$Component);

  var _super = (0, _createSuper2["default"])(ToastExample);

  function ToastExample() {
    var _this;

    (0, _classCallCheck2["default"])(this, ToastExample);
    _this = _super.apply(this, arguments);
    _this.state = {
      enableMask: _.Toast.getConfig().mask,
      enableStack: _.Toast.getConfig().stackable
    };

    _this.alwaysShowToast = function () {
      var key = _.Toast.info({
        content: 'Toast with duration = 0, removed by timer',
        duration: 0
      });

      _this.timer = setTimeout(function () {
        _.Toast.remove(key);
      }, 5000);
    };

    return _this;
  }

  (0, _createClass2["default"])(ToastExample, [{
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      _reactNative.DeviceEventEmitter.removeAllListeners('navigatorBack');

      if (this.timer) {
        clearTimeout(this.timer);
        this.timer = null;
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      return /*#__PURE__*/_react["default"].createElement(_.WingBlank, {
        style: {
          marginTop: 20
        }
      }, /*#__PURE__*/_react["default"].createElement(_.List, null, /*#__PURE__*/_react["default"].createElement(_.List.Item, {
        extra: /*#__PURE__*/_react["default"].createElement(_.Switch, {
          checked: this.state.enableMask,
          onChange: function onChange(mask) {
            _.Toast.config({
              mask: mask
            });

            _this2.setState({
              enableMask: _.Toast.getConfig().mask
            });
          }
        })
      }, "Enable Mask"), /*#__PURE__*/_react["default"].createElement(_.List.Item, {
        extra: /*#__PURE__*/_react["default"].createElement(_.Switch, {
          checked: this.state.enableStack,
          onChange: function onChange(stackable) {
            _.Toast.config({
              stackable: stackable
            });

            _this2.setState({
              enableStack: _.Toast.getConfig().stackable
            });
          }
        })
      }, "Enable Stack")), /*#__PURE__*/_react["default"].createElement(_.WhiteSpace, null), /*#__PURE__*/_react["default"].createElement(_.Button, {
        onPress: showToastNoMask
      }, "Without mask"), /*#__PURE__*/_react["default"].createElement(_.WhiteSpace, null), /*#__PURE__*/_react["default"].createElement(_.Button, {
        onPress: showToastStack
      }, "Stackable toast"), /*#__PURE__*/_react["default"].createElement(_.WhiteSpace, null), /*#__PURE__*/_react["default"].createElement(_.Button, {
        onPress: infoToast
      }, "Text toast"), /*#__PURE__*/_react["default"].createElement(_.WhiteSpace, null), /*#__PURE__*/_react["default"].createElement(_.Button, {
        onPress: successToast
      }, "Success toast"), /*#__PURE__*/_react["default"].createElement(_.WhiteSpace, null), /*#__PURE__*/_react["default"].createElement(_.Button, {
        onPress: failToast
      }, "Failed toast"), /*#__PURE__*/_react["default"].createElement(_.WhiteSpace, null), /*#__PURE__*/_react["default"].createElement(_.Button, {
        onPress: offline
      }, "Network failure toast"), /*#__PURE__*/_react["default"].createElement(_.WhiteSpace, null), /*#__PURE__*/_react["default"].createElement(_.Button, {
        onPress: loadingToast
      }, "Loading toast"), /*#__PURE__*/_react["default"].createElement(_.WhiteSpace, null), /*#__PURE__*/_react["default"].createElement(_.Button, {
        onPress: this.alwaysShowToast
      }, "Toast with duration = 0"));
    }
  }]);
  return ToastExample;
}(_react["default"].Component);

exports["default"] = ToastExample;